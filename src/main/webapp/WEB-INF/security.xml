<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		   http://www.springframework.org/schema/security
		   http://www.springframework.org/schema/security/spring-security.xsd">



	<!-- IT BASICALLY SAYS THAT TO ACCESS THE WHOLE APPLICATION THE USER MUST 
		HAVE THE ROLE ROLE_USER AND WHERE DO WE GET THE USERS AND THEIR ROLES BY 
		USING THEIR AUTHENTICATION MANAGER -->
	<http use-expressions="true">
		<intercept-url pattern="/users**" access='hasRole("ROLE_ADMIN")' />
		<intercept-url pattern="/users/**" access='hasRole("ROLE_ADMIN")' />
		<form-login login-page="/login.html"/>
		<logout logout-url="/logout" />
		<logout />
	</http>

	<authentication-manager>
		<authentication-provider >
		<password-encoder hash="bcrypt" />
			<!-- <user-service>
				<user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN" />
			</user-service> -->
			<!-- data-source-ref="dataSource" this corresponds to the database which is also present in the applicationContext.xml for
			Eg.<jdbc:embedded-database type="HSQL" id="dataSource" />  -->
			<jdbc-user-service data-source-ref="dataSource" authorities-by-username-query="select user.name,role.name from user 
																						   join user_role on user.id = user_role.users_id
																						   join role on user_role.roles_id = role.id
																						   where user.name = ?"
															users-by-username-query = "select name,password,enabled from user where name = ?" />
			<!-- also the 1 is for whether the user is enabled or not -->												
		</authentication-provider>
	</authentication-manager>

</beans:beans>